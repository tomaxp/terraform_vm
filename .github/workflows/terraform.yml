name: Terraform and pfSense Automation

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout repozytorium
        uses: actions/checkout@v2

      - name: List files in repository after checkout
        run: ls -la

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: |
          terraform apply \
          -var=host="${{ secrets.XEN_URL }}" \
          -var=username="${{ secrets.XEN_USERNAME }}" \
          -var=password='${{ secrets.XEN_PASSWORD }}' \
          -var-file="vars.tfvars" \
          -auto-approve \
          -lock=false

      - name: Capture Terraform Outputs
        id: outputs
        run: |
          vm_mac_address=$(terraform output -raw vm_mac_address | tr -d '\r\n')
          echo "vm_mac_address=$vm_mac_address" >> $GITHUB_ENV
          new_vm_name=$(terraform output -raw new_vm_name | tr -d '\r\n')
          echo "new_vm_name=$new_vm_name" >> $GITHUB_ENV
          template_name=$(terraform output -raw template_name | tr -d '\r\n')
          echo "template_name=$template_name" >> $GITHUB_ENV
          memory=$(terraform output -raw memory | tr -d '\r\n')
          echo "memory=$memory" >> $GITHUB_ENV
          cpus=$(terraform output -raw cpus | tr -d '\r\n')
          echo "cpus=$cpus" >> $GITHUB_ENV
          disk_size=$(terraform output -raw disk_size | tr -d '\r\n')
          echo "disk_size=$disk_size" >> $GITHUB_ENV

  find_unused_ip:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Checkout repozytorium
        uses: actions/checkout@v2

      - name: List files in repository after checkout
        run: ls -la

      - name: Setup Python virtual environment and install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install requests beautifulsoup4 ipaddress  

      - name: Run get_unused_ip.py to find first available IP
        id: get_ip
        run: |
          source venv/bin/activate
          python3 ./.scripts/get_unused_ip.py \
          https://192.168.101.1/index.php \
          https://192.168.101.1/services_dhcp.php \
          ${{ secrets.PFSENSE_USERNAME }} \
          ${{ secrets.PFSENSE_PASSWORD }} > unused_ip.txt

      - name: Parse the first available IP
        id: parse_ip
        run: |
          AVAILABLE_IP=$(head -n 1 unused_ip.txt)
          echo "First available IP: $AVAILABLE_IP"
          echo "::set-output name=ip::$AVAILABLE_IP"

  register_in_pfsense:
    runs-on: self-hosted
    needs: find_unused_ip
    steps:
      - name: Checkout repozytorium
        uses: actions/checkout@v2

      - name: Setup Python virtual environment and install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install requests beautifulsoup4 ipaddress  

      - name: Register IP in pfSense
        run: |
          python3 ./.scripts/register_in_pfsense.py \
          ${{ secrets.PFSENSE_USERNAME }} \
          ${{ secrets.PFSENSE_PASSWORD }} \
          ${{ env.vm_mac_address }} \
          ${{ steps.parse_ip.outputs.ip }} \
          ${{ env.new_vm_name }} \
          ${{ env.template_name }} \
          ${{ env.cpus }} \
          ${{ env.memory }} \
          ${{ env.disk_size }}

  summary:
    runs-on: self-hosted
    needs: register_in_pfsense
    steps:
      - name: Checkout repozytorium
        uses: actions/checkout@v2

      - name: Display VM summary
        run: |
          echo "VM Details:"
          echo "Hostname: ${{ env.new_vm_name }}"
          echo "IP Address: ${{ steps.parse_ip.outputs.ip }}"
          echo "MAC Address: ${{ env.vm_mac_address }}"
          echo "CPU(s): ${{ env.cpus }}"
          echo "Memory: ${{ env.memory }} MB"
          echo "Disk Size: ${{ env.disk_size }} GB"
